@model Model.Dtos.ProductDto
<div class="row g-3">
    <div class="col-12 col-md-6">
        <label asp-for="Name" class="form-label"></label>
        <input asp-for="Name" class="form-control" placeholder="e.g., Wireless Mouse" />
        <span asp-validation-for="Name" class="text-danger"></span>
    </div>
    <div class="col-12 col-md-6">
        <label asp-for="Category" class="form-label"></label>
        <input asp-for="Category" class="form-control" placeholder="e.g., Accessories" />
        <span asp-validation-for="Category" class="text-danger"></span>
    </div>
    <div class="col-12 col-md-4">
        <label asp-for="Price" class="form-label"></label>
        <input asp-for="Price" class="form-control" type="number" step="0.01" min="0" placeholder="0.00" />
        <span asp-validation-for="Price" class="text-danger"></span>
    </div>
    <div class="col-12 col-md-4">
        <label asp-for="StockQuantity" class="form-label"></label>
        <input asp-for="StockQuantity" class="form-control" type="number" step="1" min="0" placeholder="e.g., 25" />
        <span asp-validation-for="StockQuantity" class="text-danger"></span>
    </div>
    <!-- Keep ImageUrl as a hidden field so server can persist it, but do not show it -->
    <input asp-for="ImageUrl" type="hidden" id="imageUrlHidden" />
    <div class="col-12">
        <label asp-for="Description" class="form-label"></label>
        <textarea asp-for="Description" class="form-control" rows="3" placeholder="Short summary of the product..."></textarea>
        <span asp-validation-for="Description" class="text-danger"></span>
    </div>
    <div class="col-12">
        <div class="d-flex align-items-center gap-3">
            <div class="text-muted small">Preview</div>
            <img id="productImagePreview" src="@Model?.ImageUrl" alt="Preview" class="img-thumbnail" style="max-height: 120px; display:@(string.IsNullOrWhiteSpace(Model?.ImageUrl) ? "none" : "block");" />
        </div>
    </div>
</div>
<script>
    (function(){
        const hidden = document.getElementById('imageUrlHidden');
        const img = document.getElementById('productImagePreview');
        const fileInput = document.querySelector('input[name="imageFile"]');
        if (!img) return;

        function setPreviewFromUrl(url){
            if (url && url.trim()) { img.src = url; img.style.display = 'block'; }
            else { img.removeAttribute('src'); img.style.display = 'none'; }
        }

        // Initialize from hidden ImageUrl (existing image)
        if (hidden) setPreviewFromUrl(hidden.value);

        // If a file is chosen, show a local preview
        if (fileInput){
            fileInput.addEventListener('change', function(){
                if (fileInput.files && fileInput.files[0]){
                    const reader = new FileReader();
                    reader.onload = function(e){ setPreviewFromUrl(e.target.result); };
                    reader.readAsDataURL(fileInput.files[0]);
                }
            });
        }
    })();
    </script>
